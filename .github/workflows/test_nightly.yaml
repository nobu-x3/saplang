name: TEST Nightly Build and Release
on:
  workflow_dispatch:
  push:
    branches: [autobuilder]

jobs:

  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      current_sha: ${{ steps.get-sha.outputs.sha }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: autobuilder

      - name: Get current SHA (Debug)
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get last nightly SHA
        uses: actions/cache@v4
        id: cache
        with:
          path: .last_nightly
          key: last-nightly-sha

      - name: Compare commits
        id: check
        run: |
          if [ -f .last_nightly ]; then
            LAST_NIGHTLY=$(cat .last_nightly)
            echo "Last nightly SHA: $LAST_NIGHTLY"
          else
            LAST_NIGHTLY=""
            echo "No previous nightly build"
          fi

          CURRENT_SHA="${{ steps.get-sha.outputs.sha }}"

          if [ "$CURRENT_SHA" != "$LAST_NIGHTLY" ]; then
            echo "New commits detected - should build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "No new commits - skip build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build-windows:
    runs-on: [self-hosted, x64, windows]
    needs: check-commit
    if: ${{ needs.check-commit.outputs.should_build == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            ref: ${{ needs.check-commit.outputs.current_sha }}

      - name: Get Dev Console (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build project (Windows)
        run: ci\x86_64-windows.bat

      - name: Package artifacts (Windows)
        run: |
          mkdir dist
          7z a "dist/saplang-windows-x86_64.zip" build/nightly/x86_64-windows/Release

      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-windows-x86_64-release
          path: dist/*.zip

  build-linux:
    needs: check-commit
    if: ${{ needs.check-commit.outputs.should_build == 'true' }}
    strategy:
      matrix:
        include:
          # - name: 'Linux (ARM64)'
          #   arch: arm64
          #   os: linux
          #   runs-on: [self-hosted, ARM, linux]
          - name: 'Linux (x64)'
            arch: x86_64
            os: linux
            runs-on: [self-hosted, x64, linux]
          # - name: 'Windows (x64)'
            # os: windows-latest
            # arch: x86_64
            # runs-on: [self-hosted, x64, windows]

    runs-on: ${{ matrix.runs-on }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            ref: ${{ needs.check-commit.outputs.current_sha }}

      - name: Build project (Linux)
        run: sh ci/${{ matrix.arch }}-${{ matrix.os }}-build.sh

      - name: Package artifacts Debug (Linux)
        shell: bash
        run: |
          mkdir -p dist
          tar -czvf "dist/saplang-${{ matrix.os }}-${{ matrix.arch }}-debug.tar.gz" -C build/nightly/${{ matrix.arch }}-${{ matrix.os }}/Debug .

      - name: Package artifacts Release (Linux)
        shell: bash
        run: |
          mkdir -p dist
          tar -czvf "dist/saplang-${{ matrix.os }}-${{ matrix.arch }}-release.tar.gz" -C build/nightly/${{ matrix.arch }}-${{ matrix.os }}/Release .

      - name: Upload artifact Debug (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-${{ matrix.os }}-${{ matrix.arch }}-debug
          path: saplang-${{ matrix.os }}-${{ matrix.arch }}-debug.tar.gz

      - name: Upload artifact Release (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-${{ matrix.os }}-${{ matrix.arch }}-release
          path: saplang-${{ matrix.os }}-${{ matrix.arch }}-release.tar.gz
          

  update-sha:
    needs: [check-commit, build-linux, build-windows]
    if: ${{ always() && needs.build-linux.result == 'success' && needs.build-windows.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Store new SHA
        run: echo "${{ needs.check-commit.outputs.current_sha }}" > .last_nightly
      - uses: actions/cache@v4
        with:
          path: .last_nightly
          key: last-nightly-sha

  create-release:
    needs: [check-commit, build-linux, build-windows]
    if: ${{ needs.check-commit.outputs.should_build == 'true'  && needs.build-windows.result == 'success' }}
    runs-on: [self-hosted, X64, linux]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get current date
        id: get-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: nightly-${{ steps.get-date.outputs.date }}
          name: "Nightly Build (${{ steps.get-date.outputs.date }})"
          body: |
            ## Nightly Build ${{ steps.get-date.outputs.date }}
            **Commit:** [${{ needs.check-commit.outputs.current_sha }}](https://github.com/${{ github.repository }}/commit/${{ needs.check-commit.outputs.current_sha }})
            **Build Date:** ${{ steps.get-date.outputs.date }}

            ### Artifacts:
            - Linux ARM64
            - Linux x64
            - Windows x64
          prerelease: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
